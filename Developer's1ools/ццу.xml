<?xml version="1.0" encoding="UTF-8"?>
<V8Exch:_1CV8DtUD xmlns:V8Exch="http://www.1c.ru/V8/1CV8DtUD/" xmlns:v8="http://v8.1c.ru/data" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<V8Exch:Data>
		<CatalogObject.МетрикиSLA>
			<Ref>17fc57ae-cf38-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000001</Code>
			<Description>Очередь заявок</Description>
			<Включена>true</Включена>
			<Ключ>OrdersQuery</Ключ>
			<Описание>//Что делает метод: считает количество заявок в очереди на загрузку с оптового сайта (все незагруженные заявки которые есть в 1С 8.3)¶	//Заявки на поплнение склада исключены и учитываются отдельно¶	//Ответ метода (int): количество заявок в очереди на загрузку с оптового сайта¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
ГДЕ
	НЕ ОбъектыОбмена.Обработано
	И ОбъектыОбмена.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_Сайт_состояние_заявок)
	И ОбъектыОбмена.ВидОбъекта &lt;&gt; ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.ЗаявкаНаПополнениеСклада)</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>3ff7e930-cf38-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000002</Code>
			<Description>Очередь заявок пополнения</Description>
			<Включена>true</Включена>
			<Ключ>OrdersRepQuery</Ключ>
			<Описание>	//Что делает метод: считает количество заявок на пополнение склада в очереди на загрузку с оптового сайта (все незагруженные заявки которые есть в 1С 8.3)¶	//Ответ метода (int): количество заявок в очереди на загрузку с оптового сайта¶	¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
ГДЕ
	НЕ ОбъектыОбмена.Обработано
	И ОбъектыОбмена.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_Сайт_состояние_заявок)
	И ОбъектыОбмена.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.ЗаявкаНаПополнениеСклада)</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>ac02cb0d-cf38-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000003</Code>
			<Description>Очередь розничных заявок</Description>
			<Включена>true</Включена>
			<Ключ>RetailOrdersQuery</Ключ>
			<Описание>	//Что делает метод: считает количество заявок в очереди на загрузку с розничного сайта (все незагруженные заявки которые есть в 1С 8.3)¶	//Ответ метода (int): количество заявок в очереди на загрузку с розничного сайта ¶	¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
ГДЕ
	НЕ ОбъектыОбмена.Обработано
	И ОбъектыОбмена.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменССайтом_Розница)</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>1f7a23df-cf39-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000004</Code>
			<Description>Очередь РТУ в Топлог</Description>
			<Включена>true</Включена>
			<Ключ>WMSRTUQuery</Ключ>
			<Описание>	//Что делает метод: считает количество РТУ в очереди в плане обмена в WMS¶	//Ответ метода (int): количество РТУ в очереди в плане обмена в WMS ¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	Документ.РеализацияТоваровУслуг.Изменения КАК РеализацияТоваровУслугИзменения
ГДЕ
	РеализацияТоваровУслугИзменения.Узел = &amp;Узел</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса>
				<Row>
					<ИмяПарметра>Узел</ИмяПарметра>
					<Значение xsi:type="ExchangePlanRef.ОбменПартКом83_TopLog_РТУ">b0fb70cb-c8ad-11e8-80fb-005056817b9c</Значение>
				</Row>
			</ПараметрыЗапроса>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>719a05cd-cf39-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000005</Code>
			<Description>Очередь ПТУ в Топлог</Description>
			<Включена>true</Включена>
			<Ключ>WMSPTUQuery</Ключ>
			<Описание>//Что делает метод: считает количество ПТУ + перемещения в очереди в плане обмена в WMS¶	//Ответ метода (int): количество ПТУ + перемещения в очереди в плане обмена в WMS ¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	СУММА(ВЗ.WMSPTUQuery) КАК Значение
ИЗ
	(ВЫБРАТЬ
		КОЛИЧЕСТВО(*) КАК WMSPTUQuery
	ИЗ
		Документ.ПоступлениеТоваровУслуг.Изменения КАК ПоступлениеТоваровУслугИзменения
	ГДЕ
		ПоступлениеТоваровУслугИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Документ.ПеремещениеТоваров.Изменения КАК ПеремещениеТоваровИзменения
	ГДЕ
		ПеремещениеТоваровИзменения.Узел = &amp;Узел) КАК ВЗ</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса>
				<Row>
					<ИмяПарметра>Узел</ИмяПарметра>
					<Значение xsi:type="ExchangePlanRef.ОбменПартКом83_TopLog">e238a5cf-b7cd-11e7-80f1-005056817b9c</Значение>
				</Row>
			</ПараметрыЗапроса>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>1432e55c-cf7e-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000019</Code>
			<Description>Очередь выгрузки на сайт</Description>
			<Включена>true</Включена>
			<Ключ>UploadQueueToSiteMain</Ключ>
			<Описание>	//Что делает метод: считает количество зарегистрированных объектов на исходящем узле обмена с сайтом (план обмена "ОбменПартКом83_Сайт", узел "Сайт - Выгрузка")¶	//Ответ метода (int): количество зарегистрированных объектов¶	</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	СУММА(ВложенныйЗапрос.UploadQueueToSiteObject) КАК Значение
ИЗ
	(ВЫБРАТЬ
		КОЛИЧЕСТВО(*) КАК UploadQueueToSiteObject
	ИЗ
		Справочник.БанковскиеСчета.Изменения КАК БанковскиеСчетаИзменения
	ГДЕ
		БанковскиеСчетаИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.ВидыОплатЧекаККМ.Изменения КАК ВидыОплатЧекаККМИзменения
	ГДЕ
		ВидыОплатЧекаККМИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.ВидыОтказов.Изменения КАК ВидыОтказовИзменения
	ГДЕ
		ВидыОтказовИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.ВидыСостоянийСтрокДокументов.Изменения КАК ВидыСостоянийСтрокДокументовИзменения
	ГДЕ
		ВидыСостоянийСтрокДокументовИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.Водители.Изменения КАК ВодителиИзменения
	ГДЕ
		ВодителиИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.Города.Изменения КАК ГородаИзменения
	ГДЕ
		ГородаИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.ГруппыКонтрагентов.Изменения КАК ГруппыКонтрагентовИзменения
	ГДЕ
		ГруппыКонтрагентовИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.ДоговорыКонтрагентов.Изменения КАК ДоговорыКонтрагентовИзменения
	ГДЕ
		ДоговорыКонтрагентовИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.Изготовители.Изменения КАК ИзготовителиИзменения
	ГДЕ
		ИзготовителиИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.Контрагенты.Изменения КАК КонтрагентыИзменения
	ГДЕ
		КонтрагентыИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.МаршрутыДоставки.Изменения КАК МаршрутыДоставкиИзменения
	ГДЕ
		МаршрутыДоставкиИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.Менеджеры.Изменения КАК МенеджерыИзменения
	ГДЕ
		МенеджерыИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	ГДЕ
		НоменклатураИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.Организации.Изменения КАК ОрганизацииИзменения
	ГДЕ
		ОрганизацииИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.ПараметрыФормированияЗаказовПоставщикам.Изменения КАК ПараметрыФормированияЗаказовПоставщикамИзменения
	ГДЕ
		ПараметрыФормированияЗаказовПоставщикамИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.ПараметрыФормированияСлужебныхЗаданий.Изменения КАК ПараметрыФормированияСлужебныхЗаданийИзменения
	ГДЕ
		ПараметрыФормированияСлужебныхЗаданийИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.ПрайсыПоставщиков.Изменения КАК ПрайсыПоставщиковИзменения
	ГДЕ
		ПрайсыПоставщиковИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.Регионы.Изменения КАК РегионыИзменения
	ГДЕ
		РегионыИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.СегментыКонтрагентов.Изменения КАК СегментыКонтрагентовИзменения
	ГДЕ
		СегментыКонтрагентовИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.Склады.Изменения КАК СкладыИзменения
	ГДЕ
		СкладыИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.СостоянияСтрокДокументов.Изменения КАК СостоянияСтрокДокументовИзменения
	ГДЕ
		СостоянияСтрокДокументовИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.ТипыДоставки.Изменения КАК ТипыДоставкиИзменения
	ГДЕ
		ТипыДоставкиИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Справочник.Филиалы.Изменения КАК ФилиалыИзменения
	ГДЕ
		ФилиалыИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		Документ.УстановкаУсловийПоКомпенсациямРемонта.Изменения КАК УстановкаУсловийПоКомпенсациямРемонтаИзменения
	ГДЕ
		УстановкаУсловийПоКомпенсациямРемонтаИзменения.Узел = &amp;Узел
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(*)
	ИЗ
		РегистрСведений.ГрафикиРаботыКонтрагентов.Изменения КАК ГрафикиРаботыКонтрагентовИзменения
	ГДЕ
		ГрафикиРаботыКонтрагентовИзменения.Узел = &amp;Узел) КАК ВложенныйЗапрос</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса>
				<Row>
					<ИмяПарметра>Узел</ИмяПарметра>
					<Значение xsi:type="ExchangePlanRef.ОбменПартКом83_Сайт">1c77d7a0-65ba-11e8-80f7-005056817b9c</Значение>
				</Row>
			</ПараметрыЗапроса>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>b6ed5e5e-cf7e-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000020</Code>
			<Description>Процент зарегистрированых</Description>
			<Включена>true</Включена>
			<Ключ>UploadQueuePercentToSiteMain</Ключ>
			<Описание>	//Что делает метод: считает процент зарегистрированных объектов относительно истории регистрации на исходящем узле обмена с сайтом (план обмена "ОбменПартКом83_Сайт", узел "Сайт - Выгрузка")¶	//Считаем как Процент = Х/У*100, где¶	//Х - Текущее количество зарегистрированных объектов на узле "Сайт - Выгрузка"¶	//У - Количество записей из РС истории регистрации по узлу "Сайт - Выгрузка" за последние пять минут.¶	//Если У = 0, то Процент = 100¶	//Ответ метода (int): посчитанный процент</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(UploadQueueToSiteObject) КАК UploadQueueToSiteMain
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*) КАК UploadQueueToSiteObject
	|	ИЗ
	|		Справочник.БанковскиеСчета.Изменения КАК БанковскиеСчетаИзменения
	|	ГДЕ
	|		БанковскиеСчетаИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.ВидыОплатЧекаККМ.Изменения КАК ВидыОплатЧекаККМИзменения
	|	ГДЕ
	|		ВидыОплатЧекаККМИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.ВидыОтказов.Изменения КАК ВидыОтказовИзменения
	|	ГДЕ
	|		ВидыОтказовИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.ВидыСостоянийСтрокДокументов.Изменения КАК ВидыСостоянийСтрокДокументовИзменения
	|	ГДЕ
	|		ВидыСостоянийСтрокДокументовИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.Водители.Изменения КАК ВодителиИзменения
	|	ГДЕ
	|		ВодителиИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.Города.Изменения КАК ГородаИзменения
	|	ГДЕ
	|		ГородаИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.ГруппыКонтрагентов.Изменения КАК ГруппыКонтрагентовИзменения
	|	ГДЕ
	|		ГруппыКонтрагентовИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.ДоговорыКонтрагентов.Изменения КАК ДоговорыКонтрагентовИзменения
	|	ГДЕ
	|		ДоговорыКонтрагентовИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.Изготовители.Изменения КАК ИзготовителиИзменения
	|	ГДЕ
	|		ИзготовителиИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.Контрагенты.Изменения КАК КонтрагентыИзменения
	|	ГДЕ
	|		КонтрагентыИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.МаршрутыДоставки.Изменения КАК МаршрутыДоставкиИзменения
	|	ГДЕ
	|		МаршрутыДоставкиИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.Менеджеры.Изменения КАК МенеджерыИзменения
	|	ГДЕ
	|		МенеджерыИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	|	ГДЕ
	|		НоменклатураИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.Организации.Изменения КАК ОрганизацииИзменения
	|	ГДЕ
	|		ОрганизацииИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.ПараметрыФормированияЗаказовПоставщикам.Изменения КАК ПараметрыФормированияЗаказовПоставщикамИзменения
	|	ГДЕ
	|		ПараметрыФормированияЗаказовПоставщикамИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.ПараметрыФормированияСлужебныхЗаданий.Изменения КАК ПараметрыФормированияСлужебныхЗаданийИзменения
	|	ГДЕ
	|		ПараметрыФормированияСлужебныхЗаданийИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.ПрайсыПоставщиков.Изменения КАК ПрайсыПоставщиковИзменения
	|	ГДЕ
	|		ПрайсыПоставщиковИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.Регионы.Изменения КАК РегионыИзменения
	|	ГДЕ
	|		РегионыИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.СегментыКонтрагентов.Изменения КАК СегментыКонтрагентовИзменения
	|	ГДЕ
	|		СегментыКонтрагентовИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.Склады.Изменения КАК СкладыИзменения
	|	ГДЕ
	|		СкладыИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.СостоянияСтрокДокументов.Изменения КАК СостоянияСтрокДокументовИзменения
	|	ГДЕ
	|		СостоянияСтрокДокументовИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.ТипыДоставки.Изменения КАК ТипыДоставкиИзменения
	|	ГДЕ
	|		ТипыДоставкиИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.Филиалы.Изменения КАК ФилиалыИзменения
	|	ГДЕ
	|		ФилиалыИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Документ.УстановкаУсловийПоКомпенсациямРемонта.Изменения КАК УстановкаУсловийПоКомпенсациямРемонтаИзменения
	|	ГДЕ
	|		УстановкаУсловийПоКомпенсациямРемонтаИзменения.Узел = &amp;Узел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		РегистрСведений.ГрафикиРаботыКонтрагентов.Изменения КАК ГрафикиРаботыКонтрагентовИзменения
	|	ГДЕ
	|		ГрафикиРаботыКонтрагентовИзменения.Узел = &amp;Узел) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Узел", ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена("ОбменПартКом83_Сайт", 2));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	UploadQueueToSiteMain = Выборка.UploadQueueToSiteMain;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Y
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацииОбъектов КАК ИсторияРегистрацииОбъектов
	|ГДЕ
	|	ИсторияРегистрацииОбъектов.УзелОбмена = &amp;УзелОбмена
	|	И ИсторияРегистрацииОбъектов.Период &gt;= &amp;ПятьМинутНазад";
	
	Запрос.УстановитьПараметр("УзелОбмена", ОбменДаннымиКлиентСервер.ПолучитьИсходящийУзелОбмена("ОбменПартКом83_Сайт", 2));
	Запрос.УстановитьПараметр("ПятьМинутНазад", ТекущаяДата()-60*5);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Значение = ?(Выборка.Y = 0,100,UploadQueueToSiteMain/Выборка.Y*100);
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>d620e666-cf69-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000006</Code>
			<Description>Ошибки загрузки из ОП</Description>
			<Включена>true</Включена>
			<Ключ>SWQueryIn</Ключ>
			<Описание>Что делает метод: проверяет есть ли ошибки в последней загрузке из ОП.¶	//Ответ метода (int): 0 если есть ошибка в обмене или со времени последнего обмена прошло больше 10 минут, если ошибок нет и время меньше 10 минут, то возвращает 1¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияОбменовПоСообщениямСрезПоследних.Период,
	|	ИсторияОбменовПоСообщениямСрезПоследних.Ошибка,
	|	ИсторияОбменовПоСообщениямСрезПоследних.НомерСообщения
	|ИЗ
	|	РегистрСведений.ИсторияОбменовПоСообщениям.СрезПоследних(
	|			,
	|			НомерСообщения В
	|					(ВЫБРАТЬ
	|						ОбменПартКом83_ОкноПоставщика.НомерПринятого КАК НомерПринятого
	|					ИЗ
	|						ПланОбмена.ОбменПартКом83_ОкноПоставщика КАК ОбменПартКом83_ОкноПоставщика
	|					ГДЕ
	|						ОбменПартКом83_ОкноПоставщика.Ссылка = &amp;Узел)
	|				И Узел = &amp;Узел) КАК ИсторияОбменовПоСообщениямСрезПоследних";
	
	Запрос.УстановитьПараметр("Узел", ОбменДаннымиКлиентСервер.ПолучитьВходящийУзелОбмена("ОбменПартКом83_ОкноПоставщика", 3));
	Результат  = Запрос.Выполнить();
	Если Результат.Пустой() тогда 
		Значение = 0 
	Иначе
		Выборка  = Результат.Выбрать();
		Выборка.Следующий() ;
		Если ТекущаяДатаСеанса() - Выборка.Период &gt; 600 Тогда
			Значение= 0;
		ИначеЕсли Выборка.Ошибка Тогда
			Значение= 0;
		Иначе
			Значение= 1;
		КонецЕсли;
	КонецЕсли
	
	
	</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>2ef66394-cf6a-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000007</Code>
			<Description>Есть ошибки обмена с вмс</Description>
			<Включена>true</Включена>
			<Ключ>WMSExchangeQuery</Ключ>
			<Описание>	//Что делает метод: анализирует, есть ли ошибки в последнем обмене с WMS¶	//Ответ метода (int): 1 - если ошибок нет, 0 - если ошибки есть</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияОбменовПоСообщениямСрезПоследних.Период,
	|	ИсторияОбменовПоСообщениямСрезПоследних.НомерСообщения
	|ИЗ
	|	РегистрСведений.ИсторияОбменовПоСообщениям.СрезПоследних(
	|			,
	|			НомерСообщения В
	|					(ВЫБРАТЬ
	|						ОбменПартКом83_TopLog.НомерПринятого
	|					ИЗ
	|						ПланОбмена.ОбменПартКом83_TopLog КАК ОбменПартКом83_TopLog
	|					ГДЕ
	|						ОбменПартКом83_TopLog.Ссылка = &amp;Узел)
	|				И Узел = &amp;Узел
	|				И НЕ Исходящее) КАК ИсторияОбменовПоСообщениямСрезПоследних
	|ГДЕ
	|	ИсторияОбменовПоСообщениямСрезПоследних.Ошибка";
	
	Запрос.УстановитьПараметр("Узел", ОбменДаннымиКлиентСервер.ПолучитьВходящийУзелОбмена("ОбменПартКом83_TopLog", 3));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Значение = 1;
	Иначе
		Значение = 0;
	КонецЕсли;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>ce2d82a7-cf6a-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000008</Code>
			<Description>Очередь загрузки РТУ WMS</Description>
			<Включена>true</Включена>
			<Ключ>RTUDownloadQueueFromWMS</Ключ>
			<Описание>	//Что делает метод: считает количество РТУ в очереди на загрузку из WMS.¶	//То есть РТУ уже полученные пакетом из WMS, но которые еще в очереди на запись в базу.¶	//Ответ метода (int): количество РТУ в очереди¶	¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
ГДЕ
	НЕ ОбъектыОбмена.Обработано
	И ОбъектыОбмена.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_TopLog_РТУ)
	И ОбъектыОбмена.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.РезультатСборки)</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>8702d4ca-cf8c-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000028</Code>
			<Description>Очередь клиентских переме</Description>
			<Включена>true</Включена>
			<Ключ>ClientTransferDownloadQueueFromWMS</Ключ>
			<Описание>	//Что делает метод: считает количество клиентских перемещений в очереди на загрузку из WMS.¶	//То есть клиентские перемещения уже полученные пакетом из WMS, но которые еще в очереди на запись в базу.¶	//Ответ метода (int): количество клиентских перемещений в очереди¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
ГДЕ
	НЕ ОбъектыОбмена.Обработано
	И ОбъектыОбмена.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_TopLog_КлиентскиеПеремещения)</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>28e2ab84-cf6b-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000009</Code>
			<Description>Задержка загрузки РТУ</Description>
			<Включена>true</Включена>
			<Ключ>RTUDownloadMaximumDelayFromWMS</Ключ>
			<Описание>	//Что делает метод: считает максимальное время запаздывания по загрузке РТУ из WMS. ¶	//То есть время самого старого документа в очереди. Время считается от текущего до времени помещения документа в очередь. ¶	//То есть надо определить документ в очереди который провел в очереди наибольшее время.¶	//Ответ метода (int): количество секунд в очереди¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(ОбъектыОбмена.Период), &amp;ТекущаяДата, СЕКУНДА),0) КАК RTUDownloadMaximumDelayFromWMS
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_TopLog_РТУ)	
	|	И ОбъектыОбмена.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.РезультатСборки)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());	
	Выборка = Запрос.Выполнить().Выбрать();	
	Выборка.Следующий();
	
	Значение = Выборка.RTUDownloadMaximumDelayFromWMS;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>836afad2-cf6b-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000010</Code>
			<Description>Очередь Заказов на отгруз</Description>
			<Включена>true</Включена>
			<Ключ>RTUStatusDownloadQueueFromWMS</Ключ>
			<Описание>	//Что делает метод: считает количество РТУ в очереди на загрузку из WMS.¶	//То есть РТУ уже полученные пакетом из WMS, но которые еще в очереди на запись в базу.¶	//Ответ метода (int): количество РТУ в очереди¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
ГДЕ
	НЕ ОбъектыОбмена.Обработано
	И ОбъектыОбмена.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_TopLog_РТУ)
	И ОбъектыОбмена.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.ЗаказНаОтгрузкуСтатус)</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>2df20829-cf6e-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000011</Code>
			<Description>Задерка загрузки отгрузки</Description>
			<Включена>true</Включена>
			<Ключ>RTUStatusDownloadMaximumDelayFromWMS</Ключ>
			<Описание>	//Что делает метод: считает максимальное время запаздывания по загрузке РТУ из WMS. ¶	//То есть время самого старого документа в очереди. Время считается от текущего до времени помещения документа в очередь. ¶	//То есть надо определить документ в очереди который провел в очереди наибольшее время.¶	//Ответ метода (int): количество секунд в очереди¶	¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(ОбъектыОбмена.Период), &amp;ТекущаяДата, СЕКУНДА),0) КАК RTUStatusDownloadMaximumDelayFromWMS
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена
	|	И ОбъектыОбмена.ВидОбъекта = &amp;ВидОбъекта";
	
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_TopLog_РТУ);	
	Запрос.УстановитьПараметр("ВидОбъекта", Перечисления.ВидыОбъектовОбмена.ЗаказНаОтгрузкуСтатус);
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());	
	Выборка = Запрос.Выполнить().Выбрать();	
	Выборка.Следующий();
	
	Значение =  Выборка.RTUStatusDownloadMaximumDelayFromWMS;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>f8fa8ce8-cf8c-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000029</Code>
			<Description>Остальная очередь топлог</Description>
			<Включена>true</Включена>
			<Ключ>OtherDownloadQueueFromWMS</Ключ>
			<Описание>	//Что делает метод: считает количество объектов в очереди на загрузку из WMS, не считая клиентских перемещений и РТУ.¶	//То есть объекты уже полученные пакетом из WMS, но которые еще в очереди на запись в базу.¶	//Ответ метода (int): количество объектов в очереди¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
ГДЕ
	НЕ ОбъектыОбмена.Обработано
	И ОбъектыОбмена.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_TopLog)</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>d409066a-cf6e-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000012</Code>
			<Description>Задержка загрузки заявок</Description>
			<Включена>true</Включена>
			<Ключ>OrdersDownloadMaximumDelayFromWEB</Ключ>
			<Описание>	//Что делает метод: считает максимальное время запаздывания в очереди по загрузке Заявок из WEB (Заявки на поплнение склада исключены и учитываются отдельно). ¶	//То есть время самого старого документа в очереди. Время считается от текущего до времени помещения документа в очередь. ¶	//То есть надо определить документ в очереди который провел в очереди наибольшее время.¶	//Ответ метода (int): количество секунд в очереди¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	//Семенов И.П. 11.02.2021 XX-5951 Изменил запрос исключил заявки на пополнение
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(ОбъектыОбмена.Период), &amp;ТекущаяДата, СЕКУНДА),0) КАК OrdersDownloadMaximumDelayFromWEB
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена
	|	И ОбъектыОбмена.ВидОбъекта &lt;&gt; ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.ЗаявкаНаПополнениеСклада)";
	
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_Сайт_состояние_заявок);	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());	
	Выборка = Запрос.Выполнить().Выбрать();	
	Выборка.Следующий();
	
	Значение = Выборка.OrdersDownloadMaximumDelayFromWEB;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>08ccc7ff-cf6f-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000013</Code>
			<Description>Задержка  заявок пополнен</Description>
			<Включена>true</Включена>
			<Ключ>OrdersRepDownloadMaximumDelayFromWEB</Ключ>
			<Описание>	//Что делает метод: считает максимальное время запаздывания в очереди по загрузке Заявок на пополнение склада из WEB. ¶	//То есть время самого старого документа в очереди. Время считается от текущего до времени помещения документа в очередь. ¶	//То есть надо определить документ в очереди который провел в очереди наибольшее время.¶	//Ответ метода (int): количество секунд в очереди¶	¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(ОбъектыОбмена.Период), &amp;ТекущаяДата, СЕКУНДА), 0) КАК OrdersRepDownloadMaximumDelayFromWEB
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_Сайт_состояние_заявок)
	|	И ОбъектыОбмена.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.ЗаявкаНаПополнениеСклада)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());	
	Выборка = Запрос.Выполнить().Выбрать();	
	Выборка.Следующий();
	
	Значение = Выборка.OrdersRepDownloadMaximumDelayFromWEB;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>8a8b0132-cf6f-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000014</Code>
			<Description>Очередь загрузки из ОП</Description>
			<Включена>true</Включена>
			<Ключ>DownloadQueueFromSW</Ключ>
			<Описание>	//Что делает метод: считает количество объектов в очереди по загрузке из ОП. ¶	//То есть документы уже полученные пакетом из ОП, но которые еще в очереди на запись в базу.¶	//Ответ метода (int): количество объектов в очереди</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК  Значение
ИЗ
	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
ГДЕ
	НЕ ОбъектыОбмена.Обработано
	И ОбъектыОбмена.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_ОкноПоставщика)</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>ed960b4d-cf8d-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000033</Code>
			<Description>Задержка истории изменени</Description>
			<Включена>true</Включена>
			<Ключ>DataHistoryCacheDelay</Ключ>
			<Описание/>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	ВозвращаемоеЗначение = 0;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(КэшИсторииИзмененияДанных.Период) КАК Период
	|ИЗ
	|	РегистрСведений.КэшИсторииИзмененияДанных КАК КэшИсторииИзмененияДанных"
	);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.Период) Тогда
		ВозвращаемоеЗначение = ТекущаяДата() - Выборка.Период;
	КонецЕсли;
	
	Значение =  ВозвращаемоеЗначение;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>67508b6a-cf70-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000015</Code>
			<Description>Задержка Загрузки из ОП</Description>
			<Включена>true</Включена>
			<Ключ>DownloadMaximumDelayFromSW</Ключ>
			<Описание>	//Что делает метод: считает максимальное время запаздывания в очереди по загрузке из ОП. ¶	//То есть время самого старого документа в очереди. Время считается от текущего до времени помещения документа в очередь. ¶	//То есть надо определить документ в очереди который провел в очереди наибольшее время.¶	//Ответ метода (int): количество секунд в очереди</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(ОбъектыОбмена.Период), &amp;ТекущаяДата, СЕКУНДА), 0) КАК DownloadMaximumDelayFromSW
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ОбменПартКом83_ОкноПоставщика";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());	
	Запрос.УстановитьПараметр("ОбменПартКом83_ОкноПоставщика", Перечисления.ВидыОбменов.ОбменПартКом83_ОкноПоставщика);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Значение =  Выборка.DownloadMaximumDelayFromSW;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>7b7c0e09-cf71-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000016</Code>
			<Description>Задержка экспресс заявок</Description>
			<Включена>true</Включена>
			<Ключ>ExpressOrdersDownloadMaximumDelayFromWeb</Ключ>
			<Описание>	//Что делает метод: считает максимальное время запаздывания в очереди по загрузке экспресс-заявок из Web. ¶	//То есть время самого старого документа в очереди. Время считается от текущего до времени помещения документа в очередь. ¶	//То есть надо определить документ в очереди который провел в очереди наибольшее время.¶	//Ответ метода (int): количество секунд в очереди¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(ОбъектыОбмена.Период), &amp;ТекущаяДата, СЕКУНДА),0) КАК ExpressOrdersDownloadMaximumDelayFromWeb
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена";
	
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_Сайт_состояние_заявок_exp);	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());	
	Выборка = Запрос.Выполнить().Выбрать();	
	Выборка.Следующий();
	
	Значение =  Выборка.ExpressOrdersDownloadMaximumDelayFromWeb;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>25999945-cf7b-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000017</Code>
			<Description>Очередь  экспрес заявок</Description>
			<Включена>true</Включена>
			<Ключ>ExpressOrdersDownloadQueueFromWeb</Ключ>
			<Описание>	//Что делает метод: считает количество экспресс-заявок в очереди на загрузку из Web. ¶	//То есть экспресс-заявки уже полученные пакетом из Web, но которые еще в очереди на запись в базу.¶	//Ответ метода (int): количество экспресс-заявки в очереди¶	¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
ГДЕ
	НЕ ОбъектыОбмена.Обработано
	И ОбъектыОбмена.ВидОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_Сайт_состояние_заявок_exp)</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>59c72f3c-cf7c-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000018</Code>
			<Description>Очередь выгрузки в ОП</Description>
			<Включена>true</Включена>
			<Ключ>UploadQueueToSw</Ключ>
			<Описание>	//Что делает метод: считает количество объектов к выгрузке из 1С в ОП. ¶	//Ответ метода (int): количество объектов в очереди¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	Документ.ВозвратТоваровПоставщику.Изменения КАК ВозвратТоваровПоставщикуИзменения
ГДЕ
	ВозвратТоваровПоставщикуИзменения.Узел = &amp;Узел

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	КОЛИЧЕСТВО(*)
ИЗ
	Документ.ЗаказПоставщику.Изменения КАК ЗаказПоставщикуИзменения
ГДЕ
	ЗаказПоставщикуИзменения.Узел = &amp;Узел

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	КОЛИЧЕСТВО(*)
ИЗ
	Документ.КорректировкаЗаказаПоставщику.Изменения КАК КорректировкаЗаказаПоставщикуИзменения
ГДЕ
	КорректировкаЗаказаПоставщикуИзменения.Узел = &amp;Узел

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	КОЛИЧЕСТВО(*)
ИЗ
	Документ.ПоступлениеТоваровУслуг.Изменения КАК ПоступлениеТоваровУслугИзменения
ГДЕ
	ПоступлениеТоваровУслугИзменения.Узел = &amp;Узел
ИТОГИ
	СУММА(Значение)
ПО
	ОБЩИЕ</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса>
				<Row>
					<ИмяПарметра>Узел</ИмяПарметра>
					<Значение xsi:type="ExchangePlanRef.ОбменПартКом83_ОкноПоставщика">3baaba7a-6691-11e8-80f7-005056817b9c</Значение>
				</Row>
			</ПараметрыЗапроса>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>695f5d06-cf88-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000021</Code>
			<Description>Задержка обработки процес</Description>
			<Включена>true</Включена>
			<Ключ>ReturnsQueueProcessingDelay</Ключ>
			<Описание>	//Что делает метод: Определяет задержку обработки очереди событий процесса возвратов.¶	//Получаем запись с минимальным периодом из РС "СобытияКОбработкеАктовРассмотренияВозврата" (Ошибка = Ложь).¶	//Получаем разницу между текущей датой и полученным периодом¶	//Ответ метода (int): разница в секундах между текущей датой и полученным периодом	¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(СобытияКОбработкеПроцессов.Период), &amp;ТекущаяДата, СЕКУНДА), 0) &lt; 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(СобытияКОбработкеПроцессов.Период), &amp;ТекущаяДата, СЕКУНДА), 0)
	|	КОНЕЦ КАК ReturnsQueueProcessingDelay
	|ИЗ
	|	РегистрСведений.СобытияКОбработкеПроцессов КАК СобытияКОбработкеПроцессов
	|ГДЕ
	|	НЕ СобытияКОбработкеПроцессов.Ошибка";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Значение =  Выборка.ReturnsQueueProcessingDelay;
	
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>47c03c2d-cf89-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000022</Code>
			<Description>Количество процессов в об</Description>
			<Включена>true</Включена>
			<Ключ>ReturnsQueueProcessingQuantity</Ключ>
			<Описание/>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ReturnsQueueProcessingQuantity
	|ИЗ
	|	РегистрСведений.СобытияКОбработкеПроцессов КАК СобытияКОбработкеПроцессов
	|ГДЕ
	|	СобытияКОбработкеПроцессов.Период &lt;= &amp;Период
	|	И НЕ СобытияКОбработкеПроцессов.Ошибка";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Значение = Выборка.ReturnsQueueProcessingQuantity;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>200b7011-cf8b-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000023</Code>
			<Description>Очередь ПТУ в Топлог</Description>
			<Включена>true</Включена>
			<Ключ>PTUUploadQueueToWMS</Ключ>
			<Описание>Что делает метод: считает количество ПТУ в очереди в плане обмена в WMS¶	//Ответ метода (int): количество ПТУ в очереди в плане обмена в WMS ¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	Документ.ПоступлениеТоваровУслуг.Изменения КАК ПоступлениеТоваровУслугИзменения
ГДЕ
	ПоступлениеТоваровУслугИзменения.Узел = &amp;Узел</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса>
				<Row>
					<ИмяПарметра>Узел</ИмяПарметра>
					<Значение xsi:type="ExchangePlanRef.ОбменПартКом83_TopLog">e238a5cf-b7cd-11e7-80f1-005056817b9c</Значение>
				</Row>
			</ПараметрыЗапроса>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>5c38c99b-cf8b-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000024</Code>
			<Description>Очередь Перемещений в WMS</Description>
			<Включена>true</Включена>
			<Ключ>MovementsUploadQueueToWMS</Ключ>
			<Описание>	//Что делает метод: считает количество перемещений в очереди в плане обмена в WMS¶	//Ответ метода (int): количество перемещений в очереди в плане обмена в WMS ¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	Документ.ПеремещениеТоваров.Изменения КАК ПеремещениеТоваровИзменения
ГДЕ
	ПеремещениеТоваровИзменения.Узел = &amp;Узел</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса>
				<Row>
					<ИмяПарметра>Узел</ИмяПарметра>
					<Значение xsi:type="ExchangePlanRef.ОбменПартКом83_TopLog">e238a5cf-b7cd-11e7-80f1-005056817b9c</Значение>
				</Row>
			</ПараметрыЗапроса>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>920aa003-cf8b-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000025</Code>
			<Description>Очередь МЛ  в WMS</Description>
			<Включена>true</Включена>
			<Ключ>RouteListUploadQueueToWMS</Ключ>
			<Описание>	//Что делает метод: считает количество перемещений в очереди в плане обмена в WMS¶	//Ответ метода (int): количество перемещений в очереди в плане обмена в WMS ¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	Документ.МегаЛогист_МаршрутныйЛист.Изменения КАК МегаЛогист_МаршрутныйЛистИзменения
ГДЕ
	МегаЛогист_МаршрутныйЛистИзменения.Узел = &amp;Узел</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса>
				<Row>
					<ИмяПарметра>Узел</ИмяПарметра>
					<Значение xsi:type="ExchangePlanRef.ОбменПартКом83_TopLog">e238a5cf-b7cd-11e7-80f1-005056817b9c</Значение>
				</Row>
			</ПараметрыЗапроса>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>f20bc101-cf8b-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000026</Code>
			<Description>Быстрая очередь Топлог</Description>
			<Включена>true</Включена>
			<Ключ>FastDownloadQueueFromWMS</Ключ>
			<Описание>	//Что делает метод: считает количество объектов в очереди на загрузку из WMS в быстрых потоках (все кроме первого).¶	//То есть объекты уже полученные пакетами из WMS, но которые еще в очереди на запись в базу.¶	//Ответ метода (int): количество объектов в быстрой очереди¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
ГДЕ
	НЕ ОбъектыОбмена.Обработано
	И ОбъектыОбмена.ВидОбмена В(ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_TopLog_РТУ),ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_TopLog))
	И ОбъектыОбмена.НомерПотока &lt;&gt; 1</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>4fdd17cb-cf8c-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000027</Code>
			<Description>Очередь топлог не быстрая</Description>
			<Включена>true</Включена>
			<Ключ>SlowDownloadQueueFromWMS</Ключ>
			<Описание/>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
ГДЕ
	НЕ ОбъектыОбмена.Обработано
	И ОбъектыОбмена.ВидОбмена В(ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_TopLog_РТУ),ЗНАЧЕНИЕ(Перечисление.ВидыОбменов.ОбменПартКом83_TopLog))
	И ОбъектыОбмена.НомерПотока = 1</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>6bec9145-cf8d-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000030</Code>
			<Description>Задрежка клиентских перем</Description>
			<Включена>true</Включена>
			<Ключ>ClientTransferDownloadMaximumDelayFromWMS</Ключ>
			<Описание>	//Что делает метод: считает максимальное время запаздывания по загрузке клиентских перемещений из WMS. ¶	//То есть время самого старого документа в очереди. Время считается от текущего до времени помещения документа в очередь. ¶	//То есть надо определить документ в очереди который провел в очереди наибольшее время.¶	//Ответ метода (int): количество секунд в очереди¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(ОбъектыОбмена.Период), &amp;ТекущаяДата, СЕКУНДА),0) КАК ClientTransferDownloadMaximumDelayFromWMS
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена";
	
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_TopLog_КлиентскиеПеремещения);	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());	
	Выборка = Запрос.Выполнить().Выбрать();	
	Выборка.Следующий();
	
	Значение = Выборка.ClientTransferDownloadMaximumDelayFromWMS;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>9ef3116c-cf8d-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000031</Code>
			<Description>Задержка остальных топлог</Description>
			<Включена>true</Включена>
			<Ключ>OtherDownloadMaximumDelayFromWMS</Ключ>
			<Описание>	//Что делает метод: считает максимальное время запаздывания по загрузке объектов из WMS (не считая РТУ и клиентских перемещений). ¶	//То есть время самого старого документа в очереди. Время считается от текущего до времени помещения документа в очередь. ¶	//То есть надо определить документ в очереди который провел в очереди наибольшее время.¶	//Ответ метода (int): количество секунд в очереди¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(ОбъектыОбмена.Период), &amp;ТекущаяДата, СЕКУНДА),0) КАК OtherDownloadMaximumDelayFromWMS
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена";
	
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_TopLog);	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());	
	Выборка = Запрос.Выполнить().Выбрать();	
	Выборка.Следующий();
	
	Значение =  Выборка.OtherDownloadMaximumDelayFromWMS;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>c466da41-cf8d-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000032</Code>
			<Description>Ошибки онлайн оплат</Description>
			<Включена>true</Включена>
			<Ключ>OnlinePaymentsErrorsPercent</Ключ>
			<Описание/>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос  = новый Запрос("ВЫБРАТЬ ПЕРВЫЕ %1
	|	1 КАК ОбработаннаяЗапись,
	|	ОбъектыОбменаСрезПоследних.Ошибка КАК Ошибка
	|ПОМЕСТИТЬ СписокОбработанныхОбъектов
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена.СрезПоследних КАК ОбъектыОбменаСрезПоследних
	|ГДЕ
	|	ОбъектыОбменаСрезПоследних.Обработано
	|	И ОбъектыОбменаСрезПоследних.ВидОбмена = &amp;ВидОбмена
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыОбменаСрезПоследних.ДатаОбработки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОбработанныхОбъектов.Ошибка КАК Ошибка,
	|	СУММА(СписокОбработанныхОбъектов.ОбработаннаяЗапись) КАК КоличествоОшибочных
	|ИЗ
	|	СписокОбработанныхОбъектов КАК СписокОбработанныхОбъектов
	|ГДЕ
	|	СписокОбработанныхОбъектов.Ошибка
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокОбработанныхОбъектов.Ошибка"
	);
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_Сайт_ТранзитБИТ); 
		
	вхКоличествоАнализируемыхЗаписей = 10;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, Формат(вхКоличествоАнализируемыхЗаписей, "ЧДЦ=0; ЧГ="));
	
	ПроцентОшибочныхЗаписей = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентОшибочныхЗаписей = Выборка.КоличествоОшибочных;
	КонецЕсли;
	
	Значение = Окр(ПроцентОшибочныхЗаписей / вхКоличествоАнализируемыхЗаписей * 100, 0);
	
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>488f3f4a-cf8e-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000034</Code>
			<Description>Процент ошибок СЗ</Description>
			<Включена>true</Включена>
			<Ключ>GeneratingSZErrorsPercent</Ключ>
			<Описание/>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	
	ПроцентОшибок = 100;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 100
	               |	ВЫБОР
	               |		КОГДА ОчередьФормированияДокументовДляСлужебныхЗаданий.Документ = НЕОПРЕДЕЛЕНО
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Ошибка
	               |ПОМЕСТИТЬ втЗаписи
	               |ИЗ
	               |	РегистрСведений.ОчередьФормированияДокументовДляСлужебныхЗаданий КАК ОчередьФормированияДокументовДляСлужебныхЗаданий
	               |ГДЕ
	               |	НЕ ОчередьФормированияДокументовДляСлужебныхЗаданий.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОчередьФормированияДокументовДляСлужебныхЗаданий.Период УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(втЗаписи.Ошибка) КАК КоличествоОшибок,
	               |	КОЛИЧЕСТВО(*) КАК КоличествоЗаписей
	               |ИЗ
	               |	втЗаписи КАК втЗаписи";
	РезультатЗапроса = Запрос.Выполнить();	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ПроцентОшибок = Окр(100 * Выборка.КоличествоОшибок/Выборка.КоличествоЗаписей, 0);
	КонецЕсли;
	
	Значение = ПроцентОшибок;
	
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>d212ff46-cf8e-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000035</Code>
			<Description>Ост-я очередь WMS без КП</Description>
			<Включена>true</Включена>
			<Ключ>OtherDownloadQueueFromWMS_ByFlows</Ключ>
			<Описание>//Что делает метод: считает количество объектов в очереди на загрузку из WMS, не считая клиентских перемещений и РТУ, в группировке по номеру потока.¶	//То есть объекты уже полученные пакетом из WMS, но которые еще в очереди на запись в базу.¶	//Ответ метода (структура): количество объектов в очереди в каждом потоке от 1 до 20¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыОбмена.НомерПотока КАК НомерПотока,
	|	КОЛИЧЕСТВО(*) КАК КоличествоВПотоке
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыОбмена.НомерПотока
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПотока";
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_TopLog);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Значение = Новый Структура;
	Для А=1 По 20 Цикл
		ПараметрОтбора = Новый Структура("НомерПотока", А);
		СтрокиРезультата = Результат.НайтиСтроки(ПараметрОтбора);
		
		КоличествоВПотоке = 0;
		Для Каждого ТекущаяСтрокаРезультата Из СтрокиРезультата Цикл
			КоличествоВПотоке = ТекущаяСтрокаРезультата.КоличествоВПотоке;
		КонецЦикла;
		
		Значение.Вставить("OtherDownloadQueueFromWMS_Flow" + Строка(А), КоличествоВПотоке);
		
	КонецЦикла;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>89ccaf61-cf91-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000036</Code>
			<Description>Зад-ка Ост-я оч-дь без КП</Description>
			<Включена>true</Включена>
			<Ключ>OtherDownloadMaximumDelayFromWMS_ByFlows</Ключ>
			<Описание>	//Что делает метод: считает максимальное время запаздывания по загрузке объектов из WMS (не считая РТУ и клиентских перемещений) с группировкой по потокам. ¶	//То есть время самого старого документа в очереди. Время считается от текущего до времени помещения документа в очередь. ¶	//То есть надо определить документ в очереди который провел в очереди наибольшее время.¶	//Ответ метода (структура): количество секунд в очереди для каждого потока от 1 до 20¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыОбмена.НомерПотока КАК НомерПотока,
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(ОбъектыОбмена.Период), &amp;ТекущаяДата, СЕКУНДА), 0) КАК ВремяВПотоке
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыОбмена.НомерПотока
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПотока";	
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_TopLog);	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Значение = Новый Структура;
	Для А=1 По 20 Цикл
		ПараметрОтбора = Новый Структура("НомерПотока", А);
		СтрокиРезультата = Результат.НайтиСтроки(ПараметрОтбора);
		
		ВремяВПотоке = 0;
		Для Каждого ТекущаяСтрокаРезультата Из СтрокиРезультата Цикл
			ВремяВПотоке = ТекущаяСтрокаРезультата.ВремяВПотоке;
		КонецЦикла;
		
		Значение.Вставить("OtherDownloadMaximumDelayFromWMS_Flow" + Строка(А), ВремяВПотоке);
		
	КонецЦикла;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>db502dc8-cf91-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000037</Code>
			<Description>оч-дь КП по по-кам Топлог</Description>
			<Включена>true</Включена>
			<Ключ>ClientTransferDownloadQueueFromWMS_ByFlows</Ключ>
			<Описание>	//Что делает метод: считает количество клиентских перемещений в очереди на загрузку из WMS с группировкой по потокам.¶	//То есть клиентские перемещения уже полученные пакетом из WMS, но которые еще в очереди на запись в базу.¶	//Ответ метода (структура): количество клиентских перемещений в очереди по каждому потоку от 1 до 20¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыОбмена.НомерПотока КАК НомерПотока,
	|	КОЛИЧЕСТВО(*) КАК КоличествоВПотоке
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыОбмена.НомерПотока
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПотока";	
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_TopLog_КлиентскиеПеремещения);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Значение = Новый Структура;
	Для А=1 По 20 Цикл
		ПараметрОтбора = Новый Структура("НомерПотока", А);
		СтрокиРезультата = Результат.НайтиСтроки(ПараметрОтбора);
		
		КоличествоВПотоке = 0;
		Для Каждого ТекущаяСтрокаРезультата Из СтрокиРезультата Цикл
			КоличествоВПотоке = ТекущаяСтрокаРезультата.КоличествоВПотоке;
		КонецЦикла;
		
		Значение.Вставить("ClientTransferDownloadQueueFromWMS_Flow" + Строка(А), КоличествоВПотоке);
		
	КонецЦикла;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>51f61523-cf92-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000038</Code>
			<Description>зад-ка КП WMS по пот-кам</Description>
			<Включена>true</Включена>
			<Ключ>ClientTransferDownloadMaximumDelayFromWMS_ByFlows</Ключ>
			<Описание>	//Что делает метод: считает максимальное время запаздывания по загрузке клиентских перемещений из WMS с группировкой по потокам. ¶	//То есть время самого старого документа в очереди. Время считается от текущего до времени помещения документа в очередь. ¶	//То есть надо определить документ в очереди который провел в очереди наибольшее время.¶	//Ответ метода (структура): количество секунд в очереди для каждого потока от 1 до 20¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыОбмена.НомерПотока КАК НомерПотока,
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(ОбъектыОбмена.Период), &amp;ТекущаяДата, СЕКУНДА), 0) КАК ВремяВПотоке
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыОбмена.НомерПотока
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПотока";	
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_TopLog_КлиентскиеПеремещения);	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Значение = Новый Структура;
	Для А=1 По 20 Цикл
		ПараметрОтбора = Новый Структура("НомерПотока", А);
		СтрокиРезультата = Результат.НайтиСтроки(ПараметрОтбора);
		
		ВремяВПотоке = 0;
		Для Каждого ТекущаяСтрокаРезультата Из СтрокиРезультата Цикл
			ВремяВПотоке = ТекущаяСтрокаРезультата.ВремяВПотоке;
		КонецЦикла;
		
		Значение.Вставить("ClientTransferDownloadMaximumDelayFromWMS_Flow" + Строка(А), ВремяВПотоке);
		
	КонецЦикла;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>8bc5f192-cf92-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000039</Code>
			<Description>РТУ оч-дь по пот-кам</Description>
			<Включена>true</Включена>
			<Ключ>RTUDownloadQueueFromWMS_ByFlows</Ключ>
			<Описание>//Что делает метод: считает количество РТУ в очереди на загрузку из WMS в группировке по потокам.¶	//То есть РТУ уже полученные пакетом из WMS, но которые еще в очереди на запись в базу.¶	//Ответ метода (структура): количество РТУ в очереди по каждому потоку от 1 до 20¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыОбмена.НомерПотока КАК НомерПотока,
	|	КОЛИЧЕСТВО(*) КАК КоличествоВПотоке
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена
	|	И ОбъектыОбмена.ВидОбъекта = &amp;ВидОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыОбмена.НомерПотока
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПотока";	
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_TopLog_РТУ);
	Запрос.УстановитьПараметр("ВидОбъекта", Перечисления.ВидыОбъектовОбмена.РезультатСборки);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Значение = Новый Структура;
	Для А=1 По 20 Цикл
		ПараметрОтбора = Новый Структура("НомерПотока", А);
		СтрокиРезультата = Результат.НайтиСтроки(ПараметрОтбора);
		
		КоличествоВПотоке = 0;
		Для Каждого ТекущаяСтрокаРезультата Из СтрокиРезультата Цикл
			КоличествоВПотоке = ТекущаяСтрокаРезультата.КоличествоВПотоке;
		КонецЦикла;
		
		Значение.Вставить("RTUDownloadQueueFromWMS_Flow" + Строка(А), КоличествоВПотоке);
		
	КонецЦикла;
			
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>cc06efdc-cf92-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000040</Code>
			<Description>РТУ задержка по потокам</Description>
			<Включена>true</Включена>
			<Ключ>RTUDownloadMaximumDelayFromWMS_ByFlows</Ключ>
			<Описание>//Что делает метод: считает максимальное время запаздывания по загрузке РТУ из WMS с группировкой по потокам. ¶	//То есть время самого старого документа в очереди. Время считается от текущего до времени помещения документа в очередь. ¶	//То есть надо определить документ в очереди который провел в очереди наибольшее время.¶	//Ответ метода (структура): количество секунд в очереди для каждого потока от 1 до 20¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыОбмена.НомерПотока КАК НомерПотока,
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(ОбъектыОбмена.Период), &amp;ТекущаяДата, СЕКУНДА), 0) КАК ВремяВПотоке
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена
	|	И ОбъектыОбмена.ВидОбъекта = &amp;ВидОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыОбмена.НомерПотока
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПотока";	
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_TopLog_РТУ);
	Запрос.УстановитьПараметр("ВидОбъекта", Перечисления.ВидыОбъектовОбмена.РезультатСборки);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Значение = Новый Структура;
	Для А=1 По 20 Цикл
		ПараметрОтбора = Новый Структура("НомерПотока", А);
		СтрокиРезультата = Результат.НайтиСтроки(ПараметрОтбора);
		
		ВремяВПотоке = 0;
		Для Каждого ТекущаяСтрокаРезультата Из СтрокиРезультата Цикл
			ВремяВПотоке = ТекущаяСтрокаРезультата.ВремяВПотоке;
		КонецЦикла;
		
		Значение.Вставить("RTUDownloadMaximumDelayFromWMS_Flow" + Строка(А), ВремяВПотоке);
		
	КонецЦикла;
			
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>012a3945-cf93-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000041</Code>
			<Description>РТУОЧередьИзТоплогаПоПото</Description>
			<Включена>true</Включена>
			<Ключ>RTUStatusDownloadQueueFromWMS_ByFlows</Ключ>
			<Описание>	//Что делает метод: считает количество РТУ в очереди на загрузку из WMS в группировке по потокам.¶	//То есть РТУ уже полученные пакетом из WMS, но которые еще в очереди на запись в базу.¶	//Ответ метода (структура): количество РТУ в очереди с группировкой по потокам от 1 до 20¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыОбмена.НомерПотока КАК НомерПотока,
	|	КОЛИЧЕСТВО(*) КАК КоличествоВПотоке
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена
	|	И ОбъектыОбмена.ВидОбъекта = &amp;ВидОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыОбмена.НомерПотока
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПотока";	
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_TopLog_РТУ);
	Запрос.УстановитьПараметр("ВидОбъекта", Перечисления.ВидыОбъектовОбмена.ЗаказНаОтгрузкуСтатус);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Значение = Новый Структура;
	Для А=1 По 20 Цикл
		ПараметрОтбора = Новый Структура("НомерПотока", А);
		СтрокиРезультата = Результат.НайтиСтроки(ПараметрОтбора);
		
		КоличествоВПотоке = 0;
		Для Каждого ТекущаяСтрокаРезультата Из СтрокиРезультата Цикл
			КоличествоВПотоке = ТекущаяСтрокаРезультата.КоличествоВПотоке;
		КонецЦикла;
		
		Значение.Вставить("RTUStatusDownloadQueueFromWMS_Flow" + Строка(А), КоличествоВПотоке);
		
	КонецЦикла;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>1d5b8b3e-cf93-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000042</Code>
			<Description>РТУ загрузки из WMS по по</Description>
			<Включена>true</Включена>
			<Ключ>RTUStatusDownloadMaximumDelayFromWMS_ByFlows</Ключ>
			<Описание>	//Что делает метод: считает максимальное время запаздывания по загрузке РТУ из WMS с группировкой по потокам. ¶	//То есть время самого старого документа в очереди. Время считается от текущего до времени помещения документа в очередь. ¶	//То есть надо определить документ в очереди который провел в очереди наибольшее время.¶	//Ответ метода (структура): количество секунд в очереди по каждому потоку от 1 до 20¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыОбмена.НомерПотока КАК НомерПотока,
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(ОбъектыОбмена.Период), &amp;ТекущаяДата, СЕКУНДА), 0) КАК ВремяВПотоке
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена
	|	И ОбъектыОбмена.ВидОбъекта = &amp;ВидОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыОбмена.НомерПотока
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПотока";	
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_TopLog_РТУ);	
	Запрос.УстановитьПараметр("ВидОбъекта", Перечисления.ВидыОбъектовОбмена.ЗаказНаОтгрузкуСтатус);	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Значение = Новый Структура;
	Для А=1 По 20 Цикл
		ПараметрОтбора = Новый Структура("НомерПотока", А);
		СтрокиРезультата = Результат.НайтиСтроки(ПараметрОтбора);
		
		ВремяВПотоке = 0;
		Для Каждого ТекущаяСтрокаРезультата Из СтрокиРезультата Цикл
			ВремяВПотоке = ТекущаяСтрокаРезультата.ВремяВПотоке;
		КонецЦикла;
		
		Значение.Вставить("RTUStatusDownloadMaximumDelayFromWMS_Flow" + Строка(А), ВремяВПотоке);
		
	КонецЦикла;
			
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>6a82fcb6-cf93-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000043</Code>
			<Description>Очередь заявок по потокам</Description>
			<Включена>true</Включена>
			<Ключ>OrdersQuery_ByFlows</Ключ>
			<Описание>	//Что делает метод: считает количество заявок в очереди на загрузку с оптового сайта (все незагруженные заявки которые есть в 1С 8.3), в группировке по номеру потока.¶	//Заявки на пополнение склада исключены и учитываются отдельно¶	//Ответ метода (структура): количество объектов в очереди в каждом потоке от 1 до 20¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыОбмена.НомерПотока КАК НомерПотока,
	|	КОЛИЧЕСТВО(*) КАК КоличествоВПотоке
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена
	|	И ОбъектыОбмена.ВидОбъекта &lt;&gt; ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.ЗаявкаНаПополнениеСклада)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыОбмена.НомерПотока
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПотока";
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_Сайт_состояние_заявок);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Значение = Новый Структура;
	Для А=1 По 20 Цикл
		ПараметрОтбора = Новый Структура("НомерПотока", А);
		СтрокиРезультата = Результат.НайтиСтроки(ПараметрОтбора);
		
		КоличествоВПотоке = 0;
		Для Каждого ТекущаяСтрокаРезультата Из СтрокиРезультата Цикл
			КоличествоВПотоке = ТекущаяСтрокаРезультата.КоличествоВПотоке;
		КонецЦикла;
		
		Значение.Вставить("OrdersQuery_Flow" + Строка(А), КоличествоВПотоке);
		
	КонецЦикла;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>e0217c3e-cf93-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000044</Code>
			<Description>Задержка заявок по потока</Description>
			<Включена>true</Включена>
			<Ключ>OrdersDownloadMaximumDelayFromWEB_ByFlows</Ключ>
			<Описание>	//Что делает метод: считает максимальное время запаздывания в очереди по загрузке Заявок из WEB (Заявки на поплнение склада исключены и учитываются отдельно), в группировке по номеру потока.¶	//То есть время самого старого документа в очереди. Время считается от текущего до времени помещения документа в очередь. ¶	//То есть надо определить документ в очереди который провел в очереди наибольшее время.¶	//Ответ метода (структура): количество секунд в очереди для каждого потока от 1 до 20¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыОбмена.НомерПотока КАК НомерПотока,
	|	ЕСТЬNULL(РАЗНОСТЬДАТ(МИНИМУМ(ОбъектыОбмена.Период), &amp;ТекущаяДата, СЕКУНДА),0) КАК ВремяВПотоке
	|ИЗ
	|	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
	|ГДЕ
	|	НЕ ОбъектыОбмена.Обработано
	|	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена
	|	И ОбъектыОбмена.ВидОбъекта &lt;&gt; ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.ЗаявкаНаПополнениеСклада)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыОбмена.НомерПотока
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПотока";
	
	Запрос.УстановитьПараметр("ВидОбмена", Перечисления.ВидыОбменов.ОбменПартКом83_Сайт_состояние_заявок);	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Значение = Новый Структура;
	Для А=1 По 20 Цикл
		ПараметрОтбора = Новый Структура("НомерПотока", А);
		СтрокиРезультата = Результат.НайтиСтроки(ПараметрОтбора);
		
		ВремяВПотоке = 0;
		Для Каждого ТекущаяСтрокаРезультата Из СтрокиРезультата Цикл
			ВремяВПотоке = ТекущаяСтрокаРезультата.ВремяВПотоке;
		КонецЦикла;
		
		Значение.Вставить("OrdersDownloadMaximumDelayFromWEB_Flow" + Строка(А), ВремяВПотоке);
		
	КонецЦикла;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>1562ac6a-cf97-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000045</Code>
			<Description>Очередь Истории заявок</Description>
			<Включена>true</Включена>
			<Ключ>UploadQueueHistoryStateToMotion</Ключ>
			<Описание>	//Что делает метод: считает количество записей в истории заявок к выгрузке из 1С на сайт. ¶	//Ответ метода (int): количество объектов в очереди¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
ГДЕ
	НЕ ИсторияЗаявокПокупателя.ПолученоСайтом
	И ИсторияЗаявокПокупателя.СтрокаЗаявки.ТипПоставки &lt;&gt; ЗНАЧЕНИЕ(Перечисление.ТипПоставки.ПополнениеСклада)</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>3e23d924-cf97-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000046</Code>
			<Description>Задержка истории заявок</Description>
			<Включена>true</Включена>
			<Ключ>UploadQueueHistoryStateToMotionDelay</Ключ>
			<Описание/>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(МИНИМУМ(ИсторияЗаявокПокупателя.Период), &amp;ТекущаяДата, СЕКУНДА) КАК UploadQueueHistoryStateToMotionDelay
	|ИЗ
	|	РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	|ГДЕ
	|	НЕ ИсторияЗаявокПокупателя.ПолученоСайтом
	|	И ИсторияЗаявокПокупателя.СтрокаЗаявки.ТипПоставки &lt;&gt; ЗНАЧЕНИЕ(Перечисление.ТипПоставки.ПополнениеСклада)";
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());		
	
	Результат  =  Запрос.Выполнить();
	Если  Результат.Пустой() тогда 
		Значение = 0;
	Иначе 	
		Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Значение =  Выборка.UploadQueueHistoryStateToMotionDelay;
	
	КонецЕсли;
	
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>63bace26-cf97-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000047</Code>
			<Description>Очередь состояний заявок</Description>
			<Включена>true</Включена>
			<Ключ>UploadQueueConditionQuantityToSite</Ключ>
			<Описание/>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	СУММА(ВложенныйЗапрос.СтрокаЗаявки) КАК Значение
ИЗ
	(ВЫБРАТЬ
		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостояниеЗаявокПокупателя.СтрокаЗаявки) КАК СтрокаЗаявки
	ИЗ
		РегистрСведений.СостояниеЗаявокПокупателя КАК СостояниеЗаявокПокупателя
	ГДЕ
		НЕ СостояниеЗаявокПокупателя.ПолученоСайтом
		И СостояниеЗаявокПокупателя.КоличествоОтгружено &lt;= СостояниеЗаявокПокупателя.КоличествоВЗаявке
		И СостояниеЗаявокПокупателя.СтрокаЗаявки.ТипПоставки &lt;&gt; ЗНАЧЕНИЕ(Перечисление.ТипПоставки.ПополнениеСклада)
	
	ОБЪЕДИНИТЬ ВСЕ
	
	ВЫБРАТЬ
		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостояниеРозничныхЗаявокПокупателя.СтрокаЗаявки)
	ИЗ
		РегистрСведений.СостояниеРозничныхЗаявокПокупателя КАК СостояниеРозничныхЗаявокПокупателя
	ГДЕ
		НЕ СостояниеРозничныхЗаявокПокупателя.ПолученоСайтом) КАК ВложенныйЗапрос</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>92de451a-cf97-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000048</Code>
			<Description>ЗадержкаСостоянийЗаявок</Description>
			<Включена>true</Включена>
			<Ключ>UploadQueueConditionDelayToSite</Ключ>
			<Описание/>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(МИНИМУМ(ВложенныйЗапрос.МинимумальнаяДата), &amp;ТекущаяДата, СЕКУНДА) КАК UploadQueueConditionDelayToSite
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(СостояниеЗаявокПокупателя.ДатаИзменения) КАК МинимумальнаяДата
	|	ИЗ
	|		РегистрСведений.СостояниеЗаявокПокупателя КАК СостояниеЗаявокПокупателя
	|	ГДЕ
	|		НЕ СостояниеЗаявокПокупателя.ПолученоСайтом
	|		И СостояниеЗаявокПокупателя.КоличествоОтгружено &lt;= СостояниеЗаявокПокупателя.КоличествоВЗаявке
	|		И СостояниеЗаявокПокупателя.СтрокаЗаявки.ТипПоставки &lt;&gt; ЗНАЧЕНИЕ(Перечисление.ТипПоставки.ПополнениеСклада)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МИНИМУМ(СостояниеРозничныхЗаявокПокупателя.ДатаИзменения)
	|	ИЗ
	|		РегистрСведений.СостояниеРозничныхЗаявокПокупателя КАК СостояниеРозничныхЗаявокПокупателя
	|	ГДЕ
	|		 НЕ СостояниеРозничныхЗаявокПокупателя.ПолученоСайтом) КАК ВложенныйЗапрос";
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());	
	
	Результат  =  Запрос.Выполнить();
	Если  Результат.Пустой() тогда 
		Значение = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
	
		Значение =  Выборка.UploadQueueConditionDelayToSite;

		
	КонецЕсли;
	
	
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>d63e7b6b-cf97-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000049</Code>
			<Description>Оче-дь ист-ии ссид  поп-е</Description>
			<Включена>true</Включена>
			<Ключ>UploadQueueHistoryStateToMotion_Refill</Ключ>
			<Описание>	//Что делает метод: считает количество записей в истории заявок к выгрузке из 1С на сайт. ¶	//Ответ метода (int): количество объектов в очереди¶</Описание>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК Значение
ИЗ
	РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
ГДЕ
	НЕ ИсторияЗаявокПокупателя.ПолученоСайтом
	И ИсторияЗаявокПокупателя.СтрокаЗаявки.ТипПоставки = ЗНАЧЕНИЕ(Перечисление.ТипПоставки.ПополнениеСклада)</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>0184e9a8-cf98-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000050</Code>
			<Description>Зад-ка ист-ии ссид поп-ие</Description>
			<Включена>true</Включена>
			<Ключ>UploadQueueHistoryStateToMotionDelay_Refill</Ключ>
			<Описание/>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(МИНИМУМ(ИсторияЗаявокПокупателя.Период), &amp;ТекущаяДата, СЕКУНДА) КАК UploadQueueHistoryStateToMotionDelay_Refill
	|ИЗ
	|	РегистрСведений.ИсторияЗаявокПокупателя КАК ИсторияЗаявокПокупателя
	|ГДЕ
	|	НЕ ИсторияЗаявокПокупателя.ПолученоСайтом
	|	И ИсторияЗаявокПокупателя.СтрокаЗаявки.ТипПоставки = ЗНАЧЕНИЕ(Перечисление.ТипПоставки.ПополнениеСклада)";
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());		
	
	Результат  =  Запрос.Выполнить();
	Если  Результат.Пустой() тогда 
		Значение = 0;
	Иначе 
	   	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Значение  = Выборка.UploadQueueHistoryStateToMotionDelay_Refill;

	КонецЕсли;
	
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>3e6fd5d5-cf98-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000051</Code>
			<Description>Очередь состояний попол-я</Description>
			<Включена>true</Включена>
			<Ключ>UploadQueueConditionQuantityToSite_Refill</Ключ>
			<Описание/>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостояниеЗаявокПокупателя.СтрокаЗаявки) КАК Значение
ИЗ
	РегистрСведений.СостояниеЗаявокПокупателя КАК СостояниеЗаявокПокупателя
ГДЕ
	НЕ СостояниеЗаявокПокупателя.ПолученоСайтом
	И СостояниеЗаявокПокупателя.КоличествоОтгружено &lt;= СостояниеЗаявокПокупателя.КоличествоВЗаявке
	И СостояниеЗаявокПокупателя.СтрокаЗаявки.ТипПоставки = ЗНАЧЕНИЕ(Перечисление.ТипПоставки.ПополнениеСклада)</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>f3d99ccd-cf98-11eb-810c-005056a26d28</Ref>
			<DeletionMark>false</DeletionMark>
			<Code>000000052</Code>
			<Description>Оч-дь состояний пополнени</Description>
			<Включена>true</Включена>
			<Ключ>UploadQueueConditionDelayToSite_Refill</Ключ>
			<Описание/>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(МИНИМУМ(СостояниеЗаявокПокупателя.ДатаИзменения), &amp;ТекущаяДата, СЕКУНДА) КАК UploadQueueConditionDelayToSite_Refill
	|ИЗ
	|	РегистрСведений.СостояниеЗаявокПокупателя КАК СостояниеЗаявокПокупателя
	|ГДЕ
	|	 НЕ СостояниеЗаявокПокупателя.ПолученоСайтом
	|	И СостояниеЗаявокПокупателя.КоличествоОтгружено &lt;= СостояниеЗаявокПокупателя.КоличествоВЗаявке
	|	И СостояниеЗаявокПокупателя.СтрокаЗаявки.ТипПоставки = ЗНАЧЕНИЕ(Перечисление.ТипПоставки.ПополнениеСклада)";
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());	
	
	Результат  =  Запрос.Выполнить();
	Если  Результат.Пустой() тогда 
		Значение = 0;
	Иначе
    	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Значение =  Выборка.UploadQueueConditionDelayToSite_Refill;
	

	КонецЕсли;
</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>f580c8a2-cdd1-11eb-810f-0050568188e8</Ref>
			<DeletionMark>true</DeletionMark>
			<Code>000000001</Code>
			<Description>Очередь заявок</Description>
			<Включена>false</Включена>
			<Ключ>OrdersQuery</Ключ>
			<Описание/>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса>ВЫБРАТЬ
	КОЛИЧЕСТВО(*) КАК OrdersQuery
ИЗ
	РегистрСведений.ОбъектыОбмена КАК ОбъектыОбмена
ГДЕ
	НЕ ОбъектыОбмена.Обработано
	И ОбъектыОбмена.ВидОбмена = &amp;ВидОбмена
	И ОбъектыОбмена.ВидОбъекта &lt;&gt; ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовОбмена.ЗаявкаНаПополнениеСклада)</ТекстЗапроса>
			<Алгоритм/>
			<ПараметрыЗапроса>
				<Row>
					<ИмяПарметра>ВидОбмена</ИмяПарметра>
					<Значение xsi:type="EnumRef.ВидыОбменов">ОбменПартКом83_Сайт_состояние_заявок</Значение>
				</Row>
			</ПараметрыЗапроса>
		</CatalogObject.МетрикиSLA>
		<CatalogObject.МетрикиSLA>
			<Ref>7e8571c2-cf9a-11eb-810f-0050568188e8</Ref>
			<DeletionMark>true</DeletionMark>
			<Code>000000002</Code>
			<Description>вы</Description>
			<Включена>false</Включена>
			<Ключ/>
			<Описание/>
			<ПериодичносьЗамера>0</ПериодичносьЗамера>
			<ТекстЗапроса/>
			<Алгоритм>выаы</Алгоритм>
			<ПараметрыЗапроса/>
		</CatalogObject.МетрикиSLA>
	</V8Exch:Data>
</V8Exch:_1CV8DtUD>